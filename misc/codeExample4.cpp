// This program allows you to test your compression (gzip) and decompression (gunzip)
//    functions by compressing one file then decompressing it under another name
// (You could thus compare the original with the end result.)
//
// Correct usage, assuming the executable is named codeEx, is: 
//
//      codeEx   originalName   name.gz   duplicateName
//
// where original is the file you want to compress,
//       name.gz is the name you want for the compressed file,
//   and duplicateName is the name you want to be generated by
//          decompressing the name.gz file

#include <cstdio>
#include <cstdlib>
#include <cstring>
#include "/usr/include/zlib.h"

// set a suitably-long maximum lengths for filenames and text lines
const long MaxNameLength = 256;
const long MaxLineLength = 256;

// return the size of a file in bytes
long getFileSize(char *fname);

// given the name of an input file,
//    create a (gzip) compressed version of the file using the zippedfile name
// return the size of the compressed file (in bytes)
long gzip(char *zipfile, char *plainfile);

// given the name of a (gzip) compressed file, zipfile,
//    create an uncompressed version using the name plainfile
// return the size of the uncompressed file (in bytes)
long gunzip(char *plainfile, char *zippedfile);


// test the compression and decompression by taking the three filenames
//      e.g. codeEx infile.txt infile.gz outfile.txt
// and calling gzip("infile.txt", "infile.gz") to create the compressed file
//      then gunzip("infile.gz", "outfile.txt") to create the uncompressed one
int main(int argc, char *argv[])
{
   if (argc < 4) {
      printf("This program allows you to test your compression (gzip) and decompression (gunzip)\n");
      printf("   functions by compressing one file then decompressing it under another name\n");
      printf("You can then compare the original with the end result\n\n");
      printf("Correct usage is \n   %s originalName name.gz duplicateName\n", argv[0]);
      printf("where original is the file you want to compress,\n");
      printf("      name.gz is the name you want for the compressed file,\n");
      printf("  and duplicateName is the name you want to be generated by\n");
      printf("  decompressing the name.gz file\n\n");
   } else {
      int size1 = getFileSize(argv[1]);
      if (size1 < 0) return 0;
      int size2 = gzip(argv[1], argv[2]);
      if (size2 < 0) return 0;
      int size3 = gunzip(argv[2], argv[3]);
      if (size3 < 0) return 0;
      printf("The three file sizes are %d, %d, %d\n\n", size1, size2, size3); 
   }
   return 0;
}

// return the size of a file in bytes
long getFileSize(char *fname)
{
   long size = 0;
   FILE *fp = fopen(fname, "rb");
   if (!fp) {
       printf("Unable to open input file %s\n", fname);
       return -1;
   }
   fseek(fp, 0, SEEK_END);
   size = ftell(fp);
   fclose(fp);  
   return size;
}

// given the name of a (gzip) compressed file, zipfile,
//    create an uncompressed version using the name plainfile
// return the size of the uncompressed file (in bytes)
long gunzip(char *zipfile, char *plainfile)
{
   long size = 0;

   // open the compressed file for reading (binary),
   //    quit if the open fails
   gzFile fpin = gzopen(zipfile, "rb");
   if (!fpin) {
      printf("unable to open zipped file %s\n", zipfile);
      return -1;
   }

   // open the output file for writing the uncompressed version
   //    if the open fails close the input file and quit
   FILE *fpout = fopen(plainfile, "wb");
   if (!fpout) {
      printf("unable to open output file %s\n", plainfile);
      gzclose(fpin);
      return -1;
   }
   
   // process the file contents one line at a time
   char inputLine[MaxLineLength];
   int charsRead = 0;
   do {
      // get the next line and uncompress it
      charsRead = gzread(fpin, inputLine, MaxLineLength);
      if (charsRead > 0) {
         // if there was anything there write it to the output
         //    and update the total size written
         fputs(inputLine, fpout);
         size += charsRead;
      }
   } while (charsRead > 0); 


   // close both files and return the uncompressed size
   gzclose(fpin);
   fclose(fpout);
   return size;
}

// given the name of an input file, plainfile,
//    create a (gzip) compressed version of the file using the zipfile name
// return the size of the compressed file (in bytes)
long gzip(char *plainfile, char *zipfile)
{
   // attempt to open the input file,
   //    quit if unsuccessful
   FILE *fpin = fopen(plainfile, "rb");
   if (!fpin) {
      printf("unable to open input file %s\n", plainfile);
      return -1;
   }

   // attempt to open the output file (the .gz file)
   //    and if unsuccessul close the input file before quitting
   gzFile fpout = gzopen(zipfile, "wb");
   if (!fpout) {
      printf("unable to open output file for compression, %s\n", zipfile);
      gzclose(fpout);
      return -1;
   }
   
   // process the file one line at a time
   char inputLine[MaxLineLength];
   char charsRead = 0;
   do {
      // get the next line and uncompress it
      fgets(inputLine, MaxLineLength, fpin);
      charsRead = strlen(inputLine);
      if (!feof(fpin)) {
         // if there was anything there write it to the output
         gzwrite(fpout, inputLine, charsRead);
      }
   } while (!feof(fpin));
   
   // close both files and return the final size
   fclose(fpin);
   gzclose(fpout);
   return getFileSize(zipfile);
}


