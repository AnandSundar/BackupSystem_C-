/* Name: Anand Sundar
Assignment: Phase 2
Date: 11 Nov, 2015
Purpose: This file contains the main (brain) of the program.
*/


#include "../hdr/phase2.h"
#include "../hdr/comde.h"

// stand alone function not related to class
int backup_compress(); // gets the user input when the program starts

/*static void source_path( GtkWidget *widget, char *data)
{
   GtkWidget *dialog = gtk_file_chooser_dialog_new(
       "Open File", NULL, 
       GTK_FILE_CHOOSER_ACTION_OPEN,
       GTK_STOCK_CANCEL, GTK_RESPONSE_CANCEL,
       GTK_STOCK_OPEN, GTK_RESPONSE_ACCEPT, NULL);

   // handle the user's choice
   if (gtk_dialog_run(GTK_DIALOG(dialog)) == GTK_RESPONSE_ACCEPT) {

      data = gtk_file_chooser_get_filename(GTK_FILE_CHOOSER(dialog));
      //
      // do whatever with the file they just selected
      //
      g_free(data);
   }
   // and close the dialog
   gtk_widget_destroy(dialog);

}

static void desti_path( GtkWidget *widget, char *data)
{
      GtkWidget *dialog = gtk_file_chooser_dialog_new(
       "Open File", NULL, 
       GTK_FILE_CHOOSER_ACTION_OPEN,
       GTK_STOCK_CANCEL, GTK_RESPONSE_CANCEL,
       GTK_STOCK_OPEN, GTK_RESPONSE_ACCEPT, NULL);

   // handle the user's choice
   if (gtk_dialog_run(GTK_DIALOG(dialog)) == GTK_RESPONSE_ACCEPT) {

      data = gtk_file_chooser_get_filename(GTK_FILE_CHOOSER(dialog));
      //
      // do whatever with the file they just selected
      //
      g_free(data);
   }
   // and close the dialog
   gtk_widget_destroy(dialog);

}
*/
static void backup_function( GtkWidget *widget, GtkWidget *window) //here data is a struct passed in main
{
   gtk_widget_hide(window); //hides the main window
   GtkWidget *window2;
   window2 = gtk_window_new (GTK_WINDOW_TOPLEVEL); //creates a new window
   g_signal_connect (window2, "delete-event", G_CALLBACK(gtk_main_quit), NULL); //when the user clicks the close button the program ends
   gtk_window_set_title(GTK_WINDOW (window2),"Source and Destination selection"); //casting the window(widget) into GTK_WINDOW
   gtk_container_set_border_width(GTK_CONTAINER (window2), 15); //adds the border of 15 inch
   

   GtkWidget *table, *source, *desti, *label1, *ok, *cancel, *s_browse_button, *d_browse_button, *radio1, *radio2, *radio3;
   char *s_file, *d_file;
   GSList *next;
   table = gtk_table_new(4,5,0); //row,col, homogenous
  /* source = gtk_button_new_with_mnemonic("Click to add _source path");
   g_signal_connect(source, "clicked", G_CALLBACK(source_path), s_file); //calls the source_path when the button is clicked
   desti = gtk_button_new_with_mnemonic("Click to add _desti path");
   g_signal_connect(desti, "clicked", G_CALLBACK(desti_path), d_file);
   */
   source = gtk_label_new("Select source file");
   desti = gtk_label_new("Select destination file");
   
   s_browse_button = gtk_file_chooser_button_new("Source", GTK_FILE_CHOOSER_ACTION_OPEN);
   d_browse_button = gtk_file_chooser_button_new("Destination", GTK_FILE_CHOOSER_ACTION_OPEN);
   radio1 = gtk_radio_button_new_with_label(NULL,"Compress");
   radio2 = gtk_radio_button_new_with_label_from_widget(GTK_RADIO_BUTTON(radio1),"Decompress");
   radio3 = gtk_radio_button_new_with_label_from_widget(GTK_RADIO_BUTTON(radio1),"Backup");
   ok = gtk_button_new_with_mnemonic("   _Ok   ");
   cancel = gtk_button_new_with_mnemonic("_Cancel");
   g_signal_connect(cancel, "clicked", G_CALLBACK(gtk_main_quit),NULL);
   label1 = gtk_label_new("Choose Source and Destination"); //label displays some info
   gtk_table_attach(GTK_TABLE(table),label1,1,2,0,1,GTK_FILL,GTK_FILL,0,0);//left,right,top,down
   gtk_table_attach(GTK_TABLE(table),source,0,1,1,2,GTK_FILL,GTK_FILL,0,0);
   gtk_table_attach(GTK_TABLE(table),s_browse_button,1,3,1,2,GTK_FILL,GTK_FILL,0,0);
   gtk_table_attach(GTK_TABLE(table),desti,0,1,2,3,GTK_FILL,GTK_FILL,0,0);
   gtk_table_attach(GTK_TABLE(table),d_browse_button,1,3,2,3,GTK_FILL,GTK_FILL,0,0);
   gtk_table_attach(GTK_TABLE(table),radio1,0,1,3,4,GTK_FILL,GTK_FILL,0,0);
   gtk_table_attach(GTK_TABLE(table),radio2,1,2,3,4,GTK_FILL,GTK_FILL,0,0);
   gtk_table_attach(GTK_TABLE(table),radio3,2,3,3,4,GTK_FILL,GTK_FILL,0,0);
   gtk_table_attach(GTK_TABLE(table),ok,3,4,3,4,GTK_FILL,GTK_FILL,0,0);
   gtk_table_attach(GTK_TABLE(table),cancel,4,5,3,4,GTK_FILL,GTK_FILL,0,0);
   gtk_container_add(GTK_CONTAINER(window2), table);

   gtk_widget_show_all(window2);
}



int main(int argc, char *argv[]) //command line arguments  
{
	bool perflag; // permission flag
   if(argc == 1) //no arguments supplied
   {
      //gtk function call
/***************************************************************************************************************************/
   gtk_init(&argc, &argv);




   GtkWidget *button_backup, *quit;
   GtkWidget *box;
   GtkWidget *window;
   
   window = gtk_window_new (GTK_WINDOW_TOPLEVEL); //creates a new window
   g_signal_connect (window, "delete-event", G_CALLBACK(gtk_main_quit), NULL); //when the user clicks the close button the program ends
   gtk_window_set_title(GTK_WINDOW (window),"MainWindow"); //casting the window(widget) into GTK_WINDOW
   gtk_container_set_border_width(GTK_CONTAINER (window), 15); //adds the border of 15 inch
   
   box = gtk_vbox_new(FALSE,0); //creates a box to arrange the buttons vertically
   gtk_container_add (GTK_CONTAINER (window), box); //add the box to the main window

   gtk_window_set_resizable (GTK_WINDOW (window), TRUE); //allows the user to resize the window
   gtk_window_activate_focus(GTK_WINDOW(window)); //make the window active
   gtk_window_set_default_size(GTK_WINDOW(window), 100, 120); //sets the default size of the window to 300*300
   gtk_window_set_position(GTK_WINDOW(window), GTK_WIN_POS_CENTER_ALWAYS); //positions the window in the center of the screen
   gtk_window_set_destroy_with_parent(GTK_WINDOW (window), TRUE); //true - make the main will kill itself if the tramsient will dies
   //gtk_window_set_default (GTK_WINDOW(window), button_exit); //this button will activate when the user presses enter
   //gtk_window_iconify(GTK_WINDOW(window)); //minimise the window
   //gtk_window_deiconify(GTK_WINDOW(window)); //unminimise the window
   gtk_window_set_decorated(GTK_WINDOW(window),TRUE); //decorates the title bar of the window;
   button_backup = gtk_button_new_with_mnemonic("_Backup files and folders"); //adds a button the main window
   gtk_container_add(GTK_CONTAINER(box), button_backup); //box is added on top of the container and button is added on top the box
   g_signal_connect(button_backup, "clicked", G_CALLBACK(backup_function), window); //calls the backup_function when the button is clicked
   quit = gtk_button_new_with_mnemonic("_Quit"); //label of a button
   gtk_container_add(GTK_CONTAINER(box), quit); //button is added to the container
   g_signal_connect(quit, "clicked", G_CALLBACK(gtk_main_quit), NULL); //program quits when the button is clicked
   
   
   
   gtk_widget_show(quit);
   gtk_widget_show(button_backup);
   gtk_widget_show(box);
   gtk_widget_show(window); //displays the new window
   
   gtk_main();
   return 0;

/*************************************************************************************************************************/
      phase1 ph; // creating an object of class phase1
      comde cd; //creting an object of class comde (compress_decompress)
      
      int u_i = backup_compress(); //stores the appropriate returned value in u_i (user input)
      if(u_i == 1)
      {
         //start compressing
         cd.comde_userinput_1(); // gets the input for orginal duplicate and commpress file names
         cd.errorChecking1(cd.originalName); //checks to see if the given string is <256
         cd.name_gz = cd.name_gz + ".gz"; //adds .gz to the end of the filename
         cd.errorChecking1(cd.name_gz); //checks to see if the given string is <256
         cd.errorChecking1_1(cd.originalName); //replaces ~ with /home
         cd.errorChecking1_1(cd.name_gz); //replaces ~ with /home
         bool val_originalName = cd.validating_source(cd.originalName); // checks if the source path
         // is valid
         if(val_originalName == true) //if the given path is invalid display an error message and end the program
         {
            cout<<"Source directory path is invalid"<<endl;
            cout<<"Terminating Program"<<endl;
            return 0;
         }

         perflag = cd.check_permission(cd.originalName.c_str());
         if(perflag == false)
         {
         	cout<<"Terminating program"<<endl;
         	return 0;
         }

         /*perflag = cd.check_permission(cd.name_gz.c_str());
         if(perflag == false)
         {
         	cout<<"Terminating program"<<endl;
         	return 0;
         }*/

         char temp_desti[cd.name_gz.length()];
         // calcs the total no.of slashes and stores the entire path without file name
         string temp_dpath = cd.nofile_path(cd.name_gz,temp_desti,cd.name_gz.length());
         bool dir_status;
         bool check = cd.check_desti_directory(temp_dpath,dir_status); //checks if the entire path is valid
         //if not creates the folders

         if(check == false) //if the checking has been cancelled
         {
            return 0; //end the program
         }

         cd.s_file = cd.fileChecking((cd.originalName).c_str()); //checks if its a file
         cd.d_file = cd.fileChecking((cd.name_gz).c_str());  //check to see if its a file
         cd.d_dir = cd.dirChecking((cd.name_gz).c_str()); //check if its a directory
         char sName[cd.originalName.length()];
         cd.errorChecking1_2(cd.originalName.length(),sName,cd.originalName); //stores the source path in a char array
         char dName[cd.name_gz.length()];
         cd.errorChecking1_2(cd.name_gz.length(),dName,cd.name_gz); //stores the destination path in a char array
         int status = cd.storeStatus(); 
         if(status == 1) //source is a file and destination file
         {
         	//calls the compress function to compress the given file
            bool stat = cd.source_file_desti_file_compress(cd.originalName, cd.name_gz,sName,dName);

            if(stat == false)
            {
               cout<<"Terminating Program"<<endl;
               return 0;
            }
         }else
         {
            cout<<"Invalid destination path"<<endl;
            return 0;
         }

      }else if(u_i == 2)
      {
         //start decompress
         cd.comde_userinput_2(); //stores the user input for the decompress phase

         cd.errorChecking1(cd.name_gz); //checks to see if the given string is <256
         cd.errorChecking1(cd.duplicateName); //checks to see if the given string is <256
         cd.errorChecking1_1(cd.name_gz); //replaces ~ with /home
         cd.errorChecking1_1(cd.duplicateName); //replaces ~ with /home
         bool val_originalName = cd.validating_source(cd.name_gz); // checks if the source path
         // is valid
         if(val_originalName == true)
         {
            cout<<"Source directory path is invalid"<<endl;
            cout<<"Terminating Program"<<endl;
            return 0;
         }

         /*perflag = cd.check_permission(cd.duplicateName.c_str());
         if(perflag == false)
         {
         	cout<<"Terminating program"<<endl;
         	return 0;
         }*/

         perflag = cd.check_permission(cd.name_gz.c_str());
         if(perflag == false)
         {
         	cout<<"Terminating program"<<endl;
         	return 0;
         }

         char temp_desti[cd.duplicateName.length()];
         // calcs the total no.of slashes and stores the entire path without file name
         string temp_dpath = cd.nofile_path(cd.duplicateName,temp_desti,cd.duplicateName.length());
         bool dir_status;
         bool check = cd.check_desti_directory(temp_dpath,dir_status); //checks if the entire path is valid
         //if not creates the folders
         if(check == false) //if the checking has been cancelled
         {
            return 0; //end the program
         }

         cd.s_file = cd.fileChecking((cd.name_gz).c_str()); //checks if its a file
         cd.d_file = cd.fileChecking((cd.duplicateName).c_str()); 
         cd.d_dir = cd.dirChecking((cd.duplicateName).c_str()); //checks if its a directory
         char sName[cd.name_gz.length()];
         cd.errorChecking1_2(cd.name_gz.length(),sName,cd.name_gz); //stores the source path in a char array
         char dName[cd.duplicateName.length()];
         cd.errorChecking1_2(cd.duplicateName.length(),dName,cd.duplicateName); //stores the destiantion path in a char array

         int status = cd.storeStatus(); //returns the status code 
         if(status == 1) //source is a file and destination file
         {
         	//calls the decompression function to get the actual file
            bool stat = cd.source_file_compress_desti_file(cd.name_gz, cd.duplicateName,sName,dName);

            if(stat == false)
            {
               return 0;
            }
         }else
         {
            cout<<"Invalid destination path"<<endl;
            return 0;
         }
      }else if(u_i == 4) //navigate into the file system
      {

      	cout<<endl;
      	cout<<"Initiating navigation protocol....."<<endl;
      	bool flag = cd.navigation_protocol(); //calls the navigation function
      	if(flag == false)
      	{
      		cout<<"Terminating Program"<<endl;
      		return 0;
      	}


      }else if(u_i == 3) //start the back up (phase 1)
		{		
         // variables to store the source and destination names
		   string sourceName = "";
		   string destiName = "";

		   ph.sourceInput(sourceName); // gets user input for source
		   ph.errorChecking1(sourceName); //errorChecking1 checks only syntax of the user input

		   //checks the source name for ~ and replace it with /home and stores the address path in a right 
		   //format
		   ph.errorChecking1_1(sourceName);
		   int sourceLength = sourceName.length(); // stores the length of the new path 
		   char s_Name[sourceLength]; // creates a new character array with the new path length

		   //stores the string sourceName in a character array so that character array can be used to find
		   // whether the path is a file or directory
		   ph.errorChecking1_2(sourceLength,s_Name,sourceName);
		   ph.destiInput(destiName); //gets user input for destinational path
		   ph.errorChecking1(destiName); //same as above
		   ph.errorChecking1_1(destiName); //same as above
		   int destiLength = destiName.length();
		   char d_Name[destiLength];
		   ph.errorChecking1_2(destiLength,d_Name,destiName); //same as above 
		   bool val_source = ph.validating_source(sourceName); //checks the validity (syntax) of the source path
		   if(val_source == true)
		   {
		      cout<<"Source path is invalid"<<endl;
		      cout<<"Terminating Program"<<endl;
		      return 0;
		   } 

		   perflag = cd.check_permission(sourceName.c_str());
         if(perflag == false)
         {
         	cout<<"Terminating program"<<endl;
         	return 0;
         }

         /*perflag = cd.check_permission(destiName.c_str());
         if(perflag == false)
         {
         	cout<<"Terminating program"<<endl;
         	return 0;
         }*/

		   char temp_desti[destiName.length()];
		   // calcs the total no.of slashes and stores the entire path without file name
		   string temp_dpath = ph.nofile_path(destiName,temp_desti,destiName.length());

		   bool dir_status;
		   bool check = ph.check_desti_directory(temp_dpath,dir_status); //checks if the entire path is valid 
		   //if not creates the folders
		   if(check == false)
		   {
		      return 0;
		   }
		   ph.s_file = ph.fileChecking(s_Name); // if 1 then it is a file, if 0 not a file
		   ph.s_dir = ph.dirChecking(s_Name); // same as above for directory
		   ph.d_file = ph.fileChecking(d_Name);// check to see if the destination is a file
		   ph.d_dir = ph.dirChecking(d_Name); //check to see if the destination is a directory
		   int status = ph.storeStatus();
		   //string s_fname;
		   if(status == 3) // source is a file and destination is a directory
		   {
		      //start backup operation
		      ph.source_file_desti_dir(sourceName,destiName,d_Name,s_Name); //carryouts the back operation

		      //deleting the dynamic string array to clear the memory space
		      delete [] ph.destiList;
		      ph.destiList = NULL;
		      return 0;

		   }else if(status == -1)
		   {
		      cout<<"Terminating program"<<endl;
		      return 0;
		   }else if(status == 1) // copy source file to destination file
		   {
            //function call to copy source file to destination file
		      ph.source_file_desti_file(sourceName, destiName, d_Name, s_Name); 

		      delete [] ph.destiList; //delete the dynamic array
		      ph.destiList = NULL; // point the pointer to NULL
		      return 0;
		   }else if(status == 2) //copy source directory to destination directory(recursive copy)
		   {
            //function call to copy dire to dire
		      ph.source_dir_desti_dir(sourceName, destiName, dir_status);
		      return 0;
		   }
		}
			

	}else if(argc == 5 && (argv[1] == wzip && argv[3] == wdesti)) //if the source and destination is given as cla
   {
   		comde cd; //creting an object of class comde (compress_decompress)
   		string sourceName=argv[2];//store the source name given in the cla
		string destiName=argv[4];// stores the destination name given in cla
		cd.errorChecking1(sourceName); //checks to see if the given string is <256
		cd.errorChecking1(destiName); //checks to see if the given string is <256
		cd.errorChecking1_1(sourceName); //replaces ~ with /home
		cd.errorChecking1_1(destiName); //replaces ~ with /home
		bool val_originalName = cd.validating_source(sourceName); // checks if the source path
		// is valid
		if(val_originalName == true) //terminate the program if the path is invalid
		{
			cout<<"Source directory path is invalid"<<endl;
			cout<<"Terminating Program"<<endl;
			return 0;
		}

		 perflag = cd.check_permission(sourceName.c_str());
         if(perflag == false)
         {
         	cout<<"Terminating program"<<endl;
         	return 0;
         }

         /*perflag = cd.check_permission(destiName.c_str());
         if(perflag == false)
         {
         	cout<<"Terminating program"<<endl;
         	return 0;
         }*/
         	//cout<<sourceName[sourceName.length()-1]<<endl;
         	//cout<<sourceName[sourceName.length()-2]<<endl;
         	//cout<<sourceName[sourceName.length()-3]<<endl;
		if((sourceName[sourceName.length()-2] != 'g' && sourceName[sourceName.length()-1] != 'z') && sourceName[sourceName.length()-3]!='.')
		{
		   //compressing file
         destiName = destiName + ".gz";
         //cout<<destiName<<endl;
		   char temp_desti[destiName.length()];
		   // calcs the total no.of slashes and stores the entire path without file name
		   string temp_dpath = cd.nofile_path(destiName,temp_desti,destiName.length());
		   bool dir_status;
		   bool check = cd.check_desti_directory(temp_dpath,dir_status); //checks if the entire path is valid
		   //if not creates the folders

		   if(check == false) //if the checking has been cancelled
		   {
		      return 0; //end the program
		   }

		   cd.s_file = cd.fileChecking((sourceName).c_str());//check to see if the source is a file
		   cd.d_file = cd.fileChecking((destiName).c_str()); //check to see if the desti is a file
		   cd.d_dir = cd.dirChecking((destiName).c_str()); //check to see if the desti is a dir
		   char sName[sourceName.length()];
		   cd.errorChecking1_2(sourceName.length(),sName,sourceName); //stores the source path in a char array
		   char dName[destiName.length()];
		   cd.errorChecking1_2(destiName.length(),dName,destiName);// stores the destination path in a char array

		   int status = cd.storeStatus();
		   if(status == 1) //source is a file and destination file
		   {
            // function call to compress the source file to desti file
		      bool stat = cd.source_file_desti_file_compress(sourceName, destiName,sName,dName);

		      if(stat == false)
		      {
		         cout<<"Terminating Program"<<endl;
		         return 0;
		      }
		   }else
		   {
		      cout<<"Invalid destination path"<<endl;
		      return 0;
		   }
		}else if(sourceName[sourceName.length()-2] =='g' &&sourceName[sourceName.length()-1] == 'z' &&sourceName[sourceName.length()-3] =='.')
		{
		   //decompressing file
		   char temp_desti[destiName.length()];
		   // calcs the total no.of slashes and stores the entire path without file name
		   string temp_dpath = cd.nofile_path(destiName,temp_desti,destiName.length());
		   bool dir_status;
		   bool check = cd.check_desti_directory(temp_dpath,dir_status); //checks if the entire path is valid
		   //if not creates the folders
		   if(check == false) //if the checking has been cancelled
		   {
		      return 0; //end the program
		   }

		   cd.s_file = cd.fileChecking((sourceName).c_str());//check to see if the source is a file
		   cd.d_file = cd.fileChecking((destiName).c_str()); //check to see if the destination is a file
		   cd.d_dir = cd.dirChecking((destiName).c_str()); // check to see if the destination is a dir
		   char sName[sourceName.length()];
		   cd.errorChecking1_2(sourceName.length(),sName,cd.name_gz); //stores the path in a char array
		   char dName[destiName.length()];
		   cd.errorChecking1_2(destiName.length(),dName,destiName); //stores the path in a char array

		   int status = cd.storeStatus();
		   if(status == 1) //source is a file and destination file
		   {
            // function call to decompress the compressed file
		      bool stat = cd.source_file_compress_desti_file(sourceName, destiName,sName,dName);

		      if(stat == false)
		      {
		         cout<<"Terminating Program"<<endl;
		         return 0;
		      }
		   }
		}
   }else if((argc == 5)&&(argv[1] == wsource) &&(argv[3] == wdesti)) //cla to backup (phase1)
	{ //both source and destination are given
		phase1 ph; // creating an object of class phase1
		string sourceName = argv[2];
		string destiName = argv[4];

		ph.errorChecking1(sourceName); //errorChecking1 checks only syntax of the user input

		//checks the source name for ~ and replace it with /home and stores the address path in a right 
		//format
		int sourceLength = sourceName.length(); // stores the length of the new path 
		char s_Name[sourceLength]; // creates a new character array with the new path length

		//stores the string sourceName in a character array so that character array can be used to find
		// whether the path is a file or directory
		ph.errorChecking1_2(sourceLength,s_Name,sourceName);
		ph.errorChecking1(destiName); //same as above
		int destiLength = destiName.length();
		char d_Name[destiLength];
		ph.errorChecking1_2(destiLength,d_Name,destiName); //same as above 
		bool val_source = ph.validating_source(sourceName); //checks the validity of the source path
		if(val_source == true)// end the program if the path is invalid
		{
		   cout<<"Source path is invalid"<<endl;
		   cout<<"Terminating Program"<<endl;
		   return 0;
		}

		 perflag = ph.check_permission(sourceName.c_str());
         if(perflag == false)
         {
         	cout<<"Terminating program"<<endl;
         	return 0;
         }

         /*perflag = ph.check_permission(destiName.c_str());
         if(perflag == false)
         {
         	cout<<"Terminating program"<<endl;
         	return 0;
         }*/

		char temp_desti[destiName.length()];
		// calcs the total no.of slashes and stores the entire path without file name
		string temp_dpath = ph.nofile_path(destiName,temp_desti,destiName.length());

		bool dir_status;
		bool check = ph.check_desti_directory(temp_dpath,dir_status); // returns a true or false value depending on the user input
		if(check == false)
		{
		   return 0;
		}
		ph.s_file = ph.fileChecking(s_Name); // if 1 then it is a file, if 0 not a file
		ph.s_dir = ph.dirChecking(s_Name); // check to see if the source is dir
		ph.d_file = ph.fileChecking(d_Name);// check to see if the destination is a file
		ph.d_dir = ph.dirChecking(d_Name);// check to see if the destination is a dir
		int status = 0;
		status = ph.storeStatus();
		
      if(status == 3) // source is a file and destination is a directory
		{
		   //start backup operation
         //function call to copy source file to desti dir
		   ph.source_file_desti_dir(sourceName, destiName, d_Name, s_Name);

		   delete [] ph.destiList;// delete the dynamic array
		   ph.destiList = NULL;
		   return 0;
		}else if(status == -1) // invalid input end the program
		{
		   cout<<"Terminating program"<<endl;
		   return 0;
		}else if(status == 1) // copy source file to destination file
		{
         // function call to copy source file to destination file
		   ph.source_file_desti_file(sourceName, destiName, d_Name, s_Name);

		   delete [] ph.destiList;//free the memory
		   ph.destiList = NULL;
		   return 0;
		}else if(status == 2) //copy source directory to destination directory(recursive copy)
		{
         // function call to copy dir to dir
		   ph.source_dir_desti_dir(sourceName, destiName, dir_status);

		}
	}else if((argc == 3)) // only source or destination is given in command line 
	{
		if(argv[1] == wsource){ // check source for validity and request destination path    
		   phase1 ph; // creating an object of class phase1
		   string sourceName = argv[2]; //assigns the source path from the command line
		   string destiName="";
		   ph.errorChecking1(sourceName); //errorChecking1 checks only syntax of the user input

		   //checks the source name for ~ and replace it with /home and stores the address path in a right 
		   //format
		   int sourceLength = sourceName.length(); // stores the length of the new path 
		   char s_Name[sourceLength]; // creates a new character array with the new path length

		   //stores the string sourceName in a character array so that character array can be used to find
		   // whether the path is a file or directory
		   ph.errorChecking1_2(sourceLength,s_Name,sourceName);
		   ph.destiInput(destiName); //gets user input for destinational path
		   ph.errorChecking1(destiName); //same as above
		   ph.errorChecking1_1(destiName); //same as above
		   int destiLength = destiName.length();
		   char d_Name[destiLength];
		   ph.errorChecking1_2(destiLength,d_Name,destiName); //same as above 
		   bool val_source = ph.validating_source(sourceName); //checks the validity of the source path
		   
         if(val_source == true)// end the program if the source is invalid
		   {
		      cout<<"Source path is invalid"<<endl;
		      cout<<"Terminating Program"<<endl;
		      return 0;
		   }

		   	 perflag = ph.check_permission(sourceName.c_str());
	         if(perflag == false)
	         {
	         	cout<<"Terminating program"<<endl;
	         	return 0;
	         }

	         /*perflag = ph.check_permission(destiName.c_str());
	         if(perflag == false)
	         {
	         	cout<<"Terminating program"<<endl;
	         	return 0;
	         }*/

		   char temp_desti[destiName.length()];
		   // calcs the total no.of slashes and stores the entire path without file name
		   string temp_dpath = ph.nofile_path(destiName,temp_desti,destiName.length());

		   bool dir_status;
		   bool check = ph.check_desti_directory(temp_dpath,dir_status);
		 
         if(check == false)//if the checking is cancelled end the program
		   {
		      return 0;
		   }
		   ph.s_file = ph.fileChecking(s_Name); // if 1 then it is a file, if 0 not a file
		   ph.s_dir = ph.dirChecking(s_Name); // same as above for directory
		   ph.d_file = ph.fileChecking(d_Name); //check if destination is a file
		   ph.d_dir = ph.dirChecking(d_Name);// check if the destiantion is dir
		   int status = ph.storeStatus();
		   string s_fname;
		   if(status == 3) // source is a file and destination is a directory
		   {
		      //start backup operation
		      ph.source_file_desti_dir(sourceName, destiName, d_Name,s_Name);

		      delete [] ph.destiList; //free dynamic memory
		      ph.destiList = NULL;
		      return 0;
		   }else if(status == -1)
		   {
		      cout<<"Terminating program"<<endl;
		      return 0;
		   }else if(status == 1) // copy source file to destination file
		   {
            //function call to source file to destination file
		      ph.source_file_desti_file(sourceName, destiName, d_Name, s_Name);

		      delete [] ph.destiList;//freeing memory
		      ph.destiList = NULL;
		      return 0;
		   }else if(status == 2) //copy source directory to destination directory(recursive copy)
		   {
		      ph.source_dir_desti_dir(sourceName, destiName, dir_status);
		      return 0;
		   }
		}else if(argv[1] == wdesti){ // check destination for validity and request source path
		   phase1 ph;
		   string destiName = argv[2];
		   string sourceName = ""; 
		   ph.sourceInput(sourceName); // gets user input for source
		   ph.errorChecking1(sourceName); //errorChecking1 checks only syntax of the user input

		   //checks the source name for ~ and replace it with /home and stores the address path in a right 
		   //format
		   ph.errorChecking1_1(sourceName);
		   int sourceLength = sourceName.length(); // stores the length of the new path 
		   char s_Name[sourceLength]; // creates a new character array with the new path length

		   //stores the string sourceName in a character array so that character array can be used to find
		   // whether the path is a file or directory
		   ph.errorChecking1_2(sourceLength,s_Name,sourceName);
		   ph.errorChecking1(destiName); //same as above
		   ph.errorChecking1_1(destiName); //same as above
		   int destiLength = destiName.length();
		   char d_Name[destiLength];
		   ph.errorChecking1_2(destiLength,d_Name,destiName); //same as above 
		   bool val_source = ph.validating_source(sourceName); //checks the validity of the source path
		   if(val_source == true)
		   {
		      cout<<"Source path is invalid"<<endl;
		      cout<<"Terminating Program"<<endl;
		      return 0;
		   }

		   perflag = ph.check_permission(sourceName.c_str());
         if(perflag == false)
         {
         	cout<<"Terminating program"<<endl;
         	return 0;
         }

         /*perflag = ph.check_permission(destiName.c_str());
         if(perflag == false)
         {
         	cout<<"Terminating program"<<endl;
         	return 0;
         }*/

		   char temp_desti[destiName.length()];
		   // calcs the total no.of slashes and stores the entire path without file name
		   string temp_dpath = ph.nofile_path(destiName,temp_desti,destiName.length());

		   bool dir_status;
		   bool check = ph.check_desti_directory(temp_dpath,dir_status);
		   if(check == false)
		   {
		      return 0;
		   }
		   ph.s_file = ph.fileChecking(s_Name); // if 1 then it is a file, if 0 not a file
		   ph.s_dir = ph.dirChecking(s_Name); // same as above for directory
		   ph.d_file = ph.fileChecking(d_Name);
		   ph.d_dir = ph.dirChecking(d_Name);
		   int status = ph.storeStatus();
		   string s_fname;
		   if(status == 3) // source is a file and destination is a directory
		   {
		      //start backup operation
		      ph.source_file_desti_dir(sourceName, destiName, d_Name,s_Name);

		      delete [] ph.destiList;
		      ph.destiList = NULL;
		      return 0;
		   }else if(status == -1)
		   {
		      cout<<"Terminating program"<<endl;
		      return 0;
		   }else if(status == 1) // copy source file to destination file
		   {
		      ph.source_file_desti_file(sourceName, destiName, d_Name, s_Name);
		      delete [] ph.destiList;
		      ph.destiList = NULL;
		      return 0;
		   }else if(status == 2) //copy source directory to destination directory(recursive copy)
		   {
		      ph.source_dir_desti_dir(sourceName, destiName, dir_status);
		      return 0;
		   }       
		}else
		{
		   cout<<"Invalid command line input"<<endl;
		   cout<<"Terminating Program"<<endl;
		}
	}else
	{
		cout<<"Invalid command line input"<<endl;
		cout<<"Terminating Program"<<endl;    
	}

	return 0;
}
